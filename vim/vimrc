source ~/.vim/functions.vim

set nocompatible

"" Visual
" Show line number
set number
" Show highlighted cursor line
set cursorline
" Briefly jump to a paren once it's balanced
set showmatch
" Visual hints for pesky characters
set list
set listchars=tab:▸\ ,nbsp:¬,trail:·
" Highlight code syntax
syntax on

set spell spelllang=en_us

""" Colors
colorscheme gruvbox
set background=dark
" Number of colors
set t_Co=256

""" Columns
set textwidth=79
if exists('+colorcolumn')
  " Sets column colorization at `$textwidth + 1`
  set colorcolumn=+1
endif
" When on, lines longer than the width of the window will wrap and
" displaying continues on the next line.
set wrap
" Allow specified keys that move the cursor left/right to move to the
" previous/next line when the cursor is on the first/last character in
" the line.
set whichwrap=b,s,h,l,<,>,[,]

""" Encodings
set encoding=utf-8
" `\n` shall rule the land and beyond
set fileformat=unix

""" Tabs/Whitespace
" Insert space characters whenever the tab key is pressed
set expandtab
" Number of space characters that will be inserted when the tab key is pressed
set tabstop=2
set softtabstop=2
" Number of space characters inserted for indentation
set shiftwidth=2
" Copy the indentation from the previous line, when starting a new line
set autoindent

" Allow backspacing over everything in insert mode. Each item allows a way to
" backspace over something:
"
" value   effect
" indent  allow backspacing over autoindent
" eol     allow backspacing over line breaks (join lines)
" start   allow backspacing over the start of insert; CTRL-W and CTRL-U
"               stop once at the start of insert.
set backspace=indent,eol,start

" Misc
" Don't re-open already opened buffers
set switchbuf=useopen
" Avoid moving cursor to BOL when jumping around
set nostartofline
" Let cursor move past the last char
set virtualedit=all
" Watch for file changes
set autoread

""" Movement

let mapleader = ','
" Enable the use of the mouse
set mouse=a

" Searching
" When there is a previous search pattern, highlight all its matches. The type
" of highlighting used can be set with the 'l' occasion in the 'highlight'
" option.
set hlsearch
" While typing a search command, show where the pattern, as it was typed so
" far, matches. The matched string is highlighted. If the pattern is invalid
" or not found, nothing is shown.
set incsearch
" If 'ignorecase' and 'smartcase' are set and the command line has no
" uppercase characters, the added character is converted to lowercase.
set ignorecase
set smartcase

" Status bar
set laststatus=2
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=\ [POS=%04l,%04c%V]

" Directories for swp files
" persistent undos
if exists('+undofile')
  set undofile
  set undodir=~/.vim/tmp/undos
endif
set backupdir=~/.vim/tmp/backups
set directory=~/.vim/tmp/swaps

" Nicer text navigation
" The problem with the often used
" ```
" noremap j gj
" noremap k gk
" ```
" option is, that it breaks the <vcount> functionality, if you have lines in
" your text, which span across multiple lines.
" Example: you want 10k (go UP 10 lines), because you use relative numbers in
" the sidebar, but theres a multiline with 4 lines height. Therefore you end
" up effectively at 6 lines (6k) above your desired line, which you read from
" your relative numbers. You'd have to calculate manually! Annoying...
" Especially if you have multiple multiline between your current position and
" your desired position - not Vim-istic!
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" easier insert quitinfdg
imap ;; <ESC>
map ;; <ESC>

" Reselect visual block after adjusting indentation
vnoremap < <gv
vnoremap > >gv

" Nicer splitting
set splitbelow
set splitright

" Move around in insert mode
inoremap <C-h> <left>
inoremap <C-k> <up>
inoremap <C-j> <down>
inoremap <C-l> <right>

" Tab navigation
map th :tabfirst<CR>
map tj :tabnext<CR>
map tk :tabprev<CR>
map tl :tablast<CR>
map tt :tabnew<CR>

"
" Auto commands
"

" Hints for file types
" git configure
autocmd! BufRead,BufNewFile gitconfig set ft=gitconfig
" avro schema filetype
autocmd! BufRead,BufNewFile *.avsc set ft=javascript
" protobuf filetype
autocmd! BufRead,BufNewFile *.proto set ft=proto
autocmd! BufRead,BufNewFile *.thrift set filetype=thrift

" Close vim if NERDTree is the only buffer left
autocmd! WinEnter * call CloseIfOnlyNerdTreeLeft()
" Remove trailing whitespaces
autocmd! BufWritePre * call StripTrailingWhitespaces()

" Auto save files on window blur
autocmd! FocusLost * silent! up
" automatic formatting on save
" QuickFix window close automatically when selecting a file
autocmd! FileType qf nnoremap <buffer> <CR> <C-w><CR>:cclose<CR>

filetype plugin on

"
" Plugins
"

source ~/.vim/plugins.vim

" vim-fugitive
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>

" nerdtree
nmap <leader>n :NERDTreeToggle<cr>
let g:NERDTreeIgnore      = ['\.rbc$', '\~$', '.DS_Store$', '.py[ocd]$', '__pycache__$[[dir]]']
let g:NERDTreeChDirMode   = 2
let g:NERDTreeMouseMode   = 3
let g:NERDTreeMinimalUI   = 1
let g:NERDTreeDirArrows   = 1
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeWinsize     = 30

" nerdcommenter
let g:NERDAltDelims_cpp = 1
let g:NERDCustomDelimiters = {
  \ 'cpp': { 'left': '///', 'leftAlt': '/*', 'rightAlt': '*/' },
\ }

" fzf
nmap <C-p> :FZF<cr>
nmap <leader>f :FZF<cr>

" vim-autoformat configurations
let g:autoformat_autoindent = 1
let g:autoformat_retab = 1
let g:autoformat_remove_trailing_spaces = 1
let g:autoformat_verbosemode = 0
let g:formatdef_terraform_fmt = '"terraform fmt -"'
let g:formatters_terraform = ['terraform_fmt']
map <leader>a :Autoformat<cr>

" LanguageClient
set runtimepath+=~/.vim/bundle/LanguageClient-neovim
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
    \ 'cpp': ['clangd-10', '--header-insertion=never'],
    \ 'python': ['/home/fsaintjacques/.local/bin/pyls'],
    \ 'go': ['/home/fsaintjacques/go/bin/gopls'],
    \ }

" Show small description (comment) under cursor
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" Goto definition under cursor
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" Goto implementation under cursor
nnoremap <silent> gi :call LanguageClient#textDocument_implementation()<CR>
" Goto references (usages) under cursor
nnoremap <silent> gr :call LanguageClient_textDocument_references()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" Use deoplete.
let g:deoplete#enable_at_startup = 1
call deoplete#custom#source('_', 'matchers', ['matcher_full_fuzzy'])

nmap <leader>t :GoTest<cr>

" Enable neomake when writing a buffer (no delay).
call neomake#configure#automake('w')

" In insert mode, checks if the autocomplete menu is active, if so binds to
" deoplete C-n, otherwise insert standard tab.
inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"

" Local configuration overrides everything
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif
