source ~/.vim/functions.vim

set nocompatible

"" Visual
" Show line number
set number
" Show highlighted cursor line
set cursorline
" Briefly jump to a paren once it's balanced
set showmatch
" Visual hints for pesky characters
set list
set listchars=tab:▸\ ,nbsp:¬,trail:·
" Highlight code syntax
syntax on

""" Colors
colorscheme gruvbox
set background=dark
" Number of colors
set t_Co=256

""" Columns
set textwidth=79
if exists('+colorcolumn')
  " Sets column colorization at `$textwidth + 1`
  set colorcolumn=+1
endif
" When on, lines longer than the width of the window will wrap and
" displaying continues on the next line.
set wrap
" Allow specified keys that move the cursor left/right to move to the
" previous/next line when the cursor is on the first/last character in
" the line.
set whichwrap=b,s,h,l,<,>,[,]

""" Encodings
set encoding=utf-8
" `\n` shall rule the land and beyond
set fileformat=unix

""" Tabs/Whitespace
" Insert space characters whenever the tab key is pressed
set expandtab
" Number of space characters that will be inserted when the tab key is pressed
set tabstop=2
" Number of space characters inserted for indentation
set shiftwidth=2
" Copy the indentation from the previous line, when starting a new line
set autoindent

" Allow backspacing over everything in insert mode. Each item allows a way to
" backspace over something:
"
" value   effect
" indent  allow backspacing over autoindent
" eol     allow backspacing over line breaks (join lines)
" start   allow backspacing over the start of insert; CTRL-W and CTRL-U
"               stop once at the start of insert.
set backspace=indent,eol,start

" Misc
" Don't re-open already opened buffers
set switchbuf=useopen
" Avoid moving cursor to BOL when jumping around
set nostartofline
" Let cursor move past the last char
set virtualedit=all
" Watch for file changes
set autoread

""" Movement

let mapleader = ','
" Enable the use of the mouse
set mouse=a

" Switch line-numbering from absolute/relative
nnoremap <leader>l :set relativenumber!<cr>

" Searching
" When there is a previous search pattern, highlight all its matches. The type
" of highlighting used can be set with the 'l' occasion in the 'highlight'
" option.
set hlsearch
" While typing a search command, show where the pattern, as it was typed so
" far, matches. The matched string is highlighted. If the pattern is invalid
" or not found, nothing is shown.
set incsearch
" If 'ignorecase' and 'smartcase' are set and the command line has no
" uppercase characters, the added character is converted to lowercase.
set ignorecase
set smartcase

" Status bar
set laststatus=2
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=\ [TYPE=%Y]\ [POS=%04l,%04c%V]\ [LEN=%L]

" Directories for swp files
" persistent undos
if exists('+undofile')
  set undofile
  set undodir=~/.vim/tmp/undos
endif
set backupdir=~/.vim/tmp/backups
set directory=~/.vim/tmp/swaps
set viminfo+=n~/.vim/tmp/viminfo

" Nicer text navigation
" The problem with the often used
" ```
" noremap j gj
" noremap k gk
" ```
" option is, that it breaks the <vcount> functionality, if you have lines in
" your text, which span across multiple lines.
" Example: you want 10k (go UP 10 lines), because you use relative numbers in
" the sidebar, but theres a multiline with 4 lines height. Therefore you end
" up effectively at 6 lines (6k) above your desired line, which you read from
" your relative numbers. You'd have to calculate manually! Annoying...
" Especially if you have multiple multiline between your current position and
" your desired position - not Vim-istic!
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" easier insert quitinfdg
imap ;; <ESC>
map ;; <ESC>

" Reselect visual block after adjusting indentation
vnoremap < <gv
vnoremap > >gv

" Nicer splitting
set splitbelow
set splitright

" Move around in insert mode
inoremap <C-h> <left>
inoremap <C-k> <up>
inoremap <C-j> <down>
inoremap <C-l> <right>

" Tab navigation
map th :tabfirst<CR>
map tj :tabnext<CR>
map tk :tabprev<CR>
map tl :tablast<CR>
map tt :tabnew<CR>

"
" Auto commands
"

" Hints for file types
" git configure
autocmd! BufRead,BufNewFile gitconfig set ft=gitconfig
" avro schema filetype
autocmd! BufRead,BufNewFile *.avsc set ft=javascript
" protobuf filetype
autocmd! BufRead,BufNewFile *.proto set ft=proto

" Close vim if NERDTree is the only buffer left
autocmd! WinEnter * call CloseIfOnlyNerdTreeLeft()
" Remove trailing whitespaces
autocmd! BufWritePre * call StripTrailingWhitespaces()

" Auto save files on window blur
autocmd! FocusLost * silent! up
" make use real tabs
autocmd! FileType make set noexpandtab
" automatic formatting on save
autocmd! BufWrite *.h,*.c,*.cc,*.cpp :Autoformat
" QuickFix window close automatically when selecting a file
autocmd! FileType qf nnoremap <buffer> <CR> <C-w><CR>:cclose<CR>
" aspell commit messages if possible
if executable('aspell')
    autocmd BufWritePre GIT_COMMIT !aspell -c %
endif

"
" Bundles
"

" setup pathogen
source ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

" vim-fugitive
"
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>

" autoformat configurations
let g:autoformat_autoindent = 1
let g:autoformat_retab = 1
let g:autoformat_remove_trailing_spaces = 1
let g:autoformat_verbosemode = 0

" nerdtree
nmap <leader>n :NERDTreeToggle<cr>
let g:NERDTreeIgnore      = ['\.rbc$', '\~$', '.DS_Store$']
let g:NERDTreeChDirMode   = 2
let g:NERDTreeMouseMode   = 3
let g:NERDTreeMinimalUI   = 1
let g:NERDTreeDirArrows   = 1
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeWinsize     = 30

" ctrlp
nmap <leader>p :CtrlPMixed

filetype plugin indent on

if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif

" autoload sesion
let g:session_autoload = "yes"
let g:session_autosave = "no"

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<SPACE>
  nnoremap <leader>s :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>
endif
