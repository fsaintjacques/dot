#! /bin/sh
#
# Copyright 2013 Chris Torek <chris.torek@gmail.com>
# http://web.torek.net/torek/git/pre-receive.sh.txt
#
# There are some git-config hooks.* variables:
#
#    hooks.branches.create.validate = <true | false>
#    hooks.branches.create.regex = <sh-regex>
#
# If `hooks.branches.create.validate` is set, branch names are validated by
# matching `hooks.branches.create.regex`

set -eu

: ${GIT:=git}

fatal()
{
    echo "$@" >&2
    exit 1
}

# 40 0's
NULL_SHA1="0000000000000000000000000000000000000000"

# default = OK
# on failing check, set this to nonzero to keep going
# or exit immediately (nonzero) to fail without more checking
STATUS=0

# Given name or SHA1, get ref type (blob, commit, tag, tree)
reftype()
{
    $GIT cat-file -t $1 || echo badref
}

# Verify created branch names agaisn't hooks.branches.create.regex if
# hooks.branches.create.validate is set.
check_branch_create()
{
    local validate regex

    validate=$($GIT config --get --bool hooks.branches.create.validate)
    if [ "$validate" = true ]; then
      regex=$($GIT config --get hooks.branches.create.regex)
      if ! [[ $SHORTREF =~ $regex ]]; then
        anno=error
        STATUS=1
        echo "$anno: branches must match '$regex' ; '$SHORTREF' does not"
      fi
    fi
}

# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
while read LOCAL_REF LOCAL_SHA REMOTE_REF REMOTE_SHA; do
    case $LOCAL_SHA,$REMOTE_SHA in
    $NULL_SHA1,*) LOCAL_TYPE=null; REMOTE_TYPE=$(reftype $REMOTE_SHA); CHANGE=delete;;
    *,$NULL_SHA1) LOCAL_TYPE=$(reftype $LOCAL_REF); REMOTE_TYPE=null; CHANGE=create;;
    *,*) LOCAL_TYPE=$(reftype $LOCAL_REF); REMOTE_TYPE=$(reftype $REMOTE_SHA); CHANGE=update;;
    esac

    if [ $LOCAL_TYPE == badref -o $REMOTE_TYPE == badref ]; then exit 1; fi

    case $LOCAL_REF in
    refs/heads/*)
        REFTYPE=branch
        SHORTREF=${LOCAL_REF#refs/heads/}
        ;;
    refs/tags/*)
        REFTYPE=tag
        SHORTREF=${LOCAL_REF#refs/tags/}
        ;;
    refs/notes/*)
        REFTYPE=note
        SHORTREF=${LOCAL_REF#refs/notes/}
        ;;
    refs/remotes/*)
        REFTYPE=remote
        SHORTREF=${LOCAL_REF#refs/remotes/}
        ;;
    *)
        REFTYPE=unknown
        SHORTREF=$LOCAL_REF
        ;;
    esac

    # CHANGE can be (create|delete|update)
    # REFTYPE can be (branch|tag|note|remote|unknown)
    case $CHANGE,$REFTYPE in
    create,branch)
        check_branch_create
        ;;
    *)
        ;;
    esac
done
exit $STATUS
